{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# first importing the following libraries\n",
    "import numpy as np \n",
    "import pandas as pd  \n",
    "import matplotlib.pyplot as plt \n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "# save link to data and reference the link \n",
    "csv_url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data'\n",
    "\n",
    "# the data read in does not have any column names. \n",
    "# Specify header = None to avoid reading the first row of data as a header or column name\n",
    "\n",
    "iris = pd.read_csv(csv_url, header = None)\n",
    "\n",
    "#iris = pd.read_csv('iris_data.csv', header =  None)\n",
    "\n",
    "# using the attribute information as the column names\n",
    "col_names = ['Sepal_Length_cm','Sepal_Width_cm','Petal_Length_cm','Petal_Width_cm','Class']\n",
    "\n",
    "iris =  pd.read_csv(csv_url, names = col_names)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Sepal_Length_cm</th>\n",
       "      <th>Sepal_Width_cm</th>\n",
       "      <th>Petal_Length_cm</th>\n",
       "      <th>Petal_Width_cm</th>\n",
       "      <th>Class</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5.1</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4.9</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4.7</td>\n",
       "      <td>3.2</td>\n",
       "      <td>1.3</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.6</td>\n",
       "      <td>3.1</td>\n",
       "      <td>1.5</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.0</td>\n",
       "      <td>3.6</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Sepal_Length_cm  Sepal_Width_cm  Petal_Length_cm  Petal_Width_cm  \\\n",
       "0              5.1             3.5              1.4             0.2   \n",
       "1              4.9             3.0              1.4             0.2   \n",
       "2              4.7             3.2              1.3             0.2   \n",
       "3              4.6             3.1              1.5             0.2   \n",
       "4              5.0             3.6              1.4             0.2   \n",
       "\n",
       "         Class  \n",
       "0  Iris-setosa  \n",
       "1  Iris-setosa  \n",
       "2  Iris-setosa  \n",
       "3  Iris-setosa  \n",
       "4  Iris-setosa  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# look at the top 5 observations\n",
    "iris.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Sepal_Length_cm</th>\n",
       "      <th>Sepal_Width_cm</th>\n",
       "      <th>Petal_Length_cm</th>\n",
       "      <th>Petal_Width_cm</th>\n",
       "      <th>Class</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>145</th>\n",
       "      <td>6.7</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.2</td>\n",
       "      <td>2.3</td>\n",
       "      <td>Iris-virginica</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>146</th>\n",
       "      <td>6.3</td>\n",
       "      <td>2.5</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1.9</td>\n",
       "      <td>Iris-virginica</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>147</th>\n",
       "      <td>6.5</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.2</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Iris-virginica</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>148</th>\n",
       "      <td>6.2</td>\n",
       "      <td>3.4</td>\n",
       "      <td>5.4</td>\n",
       "      <td>2.3</td>\n",
       "      <td>Iris-virginica</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>149</th>\n",
       "      <td>5.9</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.1</td>\n",
       "      <td>1.8</td>\n",
       "      <td>Iris-virginica</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Sepal_Length_cm  Sepal_Width_cm  Petal_Length_cm  Petal_Width_cm  \\\n",
       "145              6.7             3.0              5.2             2.3   \n",
       "146              6.3             2.5              5.0             1.9   \n",
       "147              6.5             3.0              5.2             2.0   \n",
       "148              6.2             3.4              5.4             2.3   \n",
       "149              5.9             3.0              5.1             1.8   \n",
       "\n",
       "              Class  \n",
       "145  Iris-virginica  \n",
       "146  Iris-virginica  \n",
       "147  Iris-virginica  \n",
       "148  Iris-virginica  \n",
       "149  Iris-virginica  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# look at the bottom 5 observations\n",
    "iris.tail()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The Data Frame has 5 columns, with the first 4 being the attributes or features of the data set. \n",
    "The last column is the class or type of iris plant each observation belongs to.\n",
    "Each row correspond to an individual observation of an iris plant\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RangeIndex(start=0, stop=150, step=1)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#The DataFrame has an index which was automatically assigned when the DataFrame was created on reading in the csv file. \n",
    "#The index is a range from 0 to 150\n",
    "iris.index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Sepal_Length_cm', 'Sepal_Width_cm', 'Petal_Length_cm',\n",
       "       'Petal_Width_cm', 'Class'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# column names of the data\n",
    "iris.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "## Missing Values\n",
    "\n",
    "## check for any missing values using pandas.isnull() or the opposite using pandas.notnull()\n",
    "print(pd.isnull(iris).sum())\n",
    "\n",
    "print(pd.notnull(iris).sum())\n",
    "\n",
    "\n",
    "# by default index.col is set to a range from 0 to the number of rows. \n",
    "# This is fine for here. I would prefer to have the row number starting from 1 and the last observation 150\n",
    "\n",
    "# can write the DataFrame to a comma separated file to save any changes including column names added\n",
    "\n",
    "\n",
    "iris.to_csv('iris_data.csv')\n",
    "\n",
    "# Detecting and Filtering outliers\n",
    "\n",
    "# can see the sumamry statistics of the dataset using the pandas.describe() function.\n",
    "# can then look at observations that have values exceeding soem statistic values using boolean.\n",
    "\n",
    "# basic descriptive statistics for each column of the data in the Iris DataFrame\n",
    "print(iris.describe())\n",
    "\n",
    "#  how many rows in the iris DataFrame?\n",
    "print(len(iris))\n",
    "\n",
    "# The shape of the dataset\n",
    "print(iris.shape)\n",
    "\n",
    "print(iris.columns)\n",
    "# can retrieve a column of data from the iris DataFrame using dict-like notation\n",
    "print(iris['Sepal_Length_cm'].head())\n",
    "\n",
    "# can find how many different plants of each class or species using unique\n",
    "\n",
    "species_type =iris['Class'].unique()\n",
    "print(\"The following are the three class or species types of iris in the data set \\n\",*species_type, sep = \" \")\n",
    "# unpack the list and print the sequence without brackets. (https://stackoverflow.com/a/35119046)\n",
    "\n",
    "# separate the different classes into different dataFrames.\n",
    "\n",
    "iris_setosa = iris[iris.Class =='Iris-setosa']\n",
    "print(iris_setosa)\n",
    "\n",
    "# Selecting and Filtering \n",
    "\n",
    "# can index using the square brackets and this will return a Series corresponding to the column name.\n",
    "# can retrieve a column of data from the iris DataFrame using dict-like notation or by attribute:\n",
    "print(iris.Petal_Width_cm.head())\n",
    "\n",
    "# rows of the iris DataFrame can be retrieved by position name or using the loc attribute.\n",
    "# The index operators can be used to select a subset or rows and columns.\n",
    "# loc for axis labels or iloc for integers\n",
    "# retrieve first observation retrieved as a DataFrame\n",
    "# The index for the iris DataFrame at the moment is just a range of integers from 0 to 150 \n",
    "iris.loc[[0]] \n",
    "# retrieve as a Series\n",
    "iris.loc[0]\n",
    "\n",
    "# I could add a new column by assigning a column that doesn't exist already.\n",
    "# I might add a new column of labels from 1 to 150 and maybe combined with the species type.\n",
    "# I dont like the index starting from 0 up to 149! \n",
    "\n",
    "# can index into the dataframe to retrieve one or more columns either with a single value or a sequence\n",
    "print(iris[0:5])\n",
    "\n",
    "# Boolean Indexing\n",
    "# can use Boolean operators to select rows that meet certain conditions.\n",
    "\n",
    "iris[iris.Sepal_Length_cm > 7]\n",
    "\n",
    "iris.iloc[:,4].head()\n",
    "\n",
    "iris_setosa = iris[Class ==\"Iris-setosa\"]\n",
    "# can sort the DataFrame by one or more of the columns.\n",
    "# put the columns in the order to sort by\n",
    "iris.sort_values(by =['Petal_Width_cm','Class'])\n",
    "iris.sort_values(by =['Class','Petal_Length_cm'])\n",
    "iris.sort_values(by =['Class','Sepal_Length_cm'])\n",
    "iris.sort_values(by =['Class','Sepal_Width_cm'])\n",
    "\n",
    "iris.sort_values(by =['Class','Petal_Length_cm'])\n",
    "\n",
    "\n",
    "## Summary statistics\n",
    "\n",
    "# Can look at summary statistics for the overall data set.\n",
    "iris.describe()\n",
    "\n",
    "# can use boolean indexing to look at the data.\n",
    "# maybe look at \n",
    "\n",
    "# sl_mean =iris.Sepal_Length_cm.mean()\n",
    "# print(sl_mean)\n",
    "# print(iris[iris.Sepal_Length_cm] > sl_mean)\n",
    "\n",
    "iris2 = iris.copy()\n",
    "print(iris2.describe())\n",
    "\n",
    "\n",
    "iris.cov()\n",
    "iris.corr()\n",
    "\n",
    "\n",
    "## Data Cleaning and Transformation\n",
    "\n",
    "\n",
    "# the duplicated method can be used to return a boolean series indicating \n",
    "# whether each row is a duplicate of another row or not.\n",
    "\n",
    "#plt.figure()\n",
    "\n",
    "# Visualising the data set\n",
    "\n",
    "# can \n",
    "# plt.figure()\n",
    "# iris.plot.hist(bins =50)\n",
    "# plt.suptitle('iris histograms',fontsize = 14)\n",
    "# plt.show()\n",
    "\n",
    "# plt.figure()\n",
    "# plt.suptitle('iris histograms of measurements',fontsize = 14)\n",
    "# iris['Class'].plot.hist(bins = 30)\n",
    "# plt.show()\n",
    "\n",
    "# plt.scatter("
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
